package comp3111.covid;

import java.util.ArrayList;


import java.util.List;

import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.Tab;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleGroup;
import javafx.scene.layout.VBox;

import javafx.beans.binding.ListExpression;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.collections.ObservableList;
import javafx.beans.property.ListProperty;
import javafx.collections.FXCollections;
import javafx.scene.Node;
import javafx.scene.control.Label;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.geometry.Pos;
import javafx.scene.control.ChoiceBox;

/**
 * Building on the sample skeleton for 'ui.fxml' Controller Class generated by SceneBuilder 
 */
public class Controller {

	@FXML
    private Tab tabTaskZero;

    @FXML
    private TextField textfieldISO;

    @FXML
    private Button buttonConfirmedDeaths;

    @FXML
    private TextField textfieldDataset;

    @FXML
    private Button buttonRateOfVaccination;

    @FXML
    private Button buttonConfirmedCases;

    @FXML
    private Tab tabReport1;

    @FXML
    private TextField A1Date;

    @FXML
    private Button confirmButtonA1;

    @FXML
    private VBox countryPaneA1;

    @FXML
    private Button ResetA1;

    @FXML
    private Tab tabReport2;

    @FXML
    private TextField B1Date;

    @FXML
    private Button confirmButtonB1;

    @FXML
    private VBox countryPaneB1;

    @FXML
    private Button ResetB1;

    @FXML
    private Tab tabReport3;

    @FXML
    private Button confirmButtonC1;

    @FXML
    private TextField C1Date;

    @FXML
    private VBox countryPaneC1;

    @FXML
    private Button ResetC1;

    @FXML
    private Tab tabApp1;

    @FXML
    private TextField A2Period;

    @FXML
    private Button confirmButtonA2;

    @FXML
    private VBox countryPaneA2;

    @FXML
    private Button ResetA2;

    @FXML
    private Tab tabApp2;

    @FXML
    private TextField B2Period;

    @FXML
    private Button confirmButtonB2;

    @FXML
    private VBox countryPaneB2;

    @FXML
    private Button ResetB2;

    @FXML
    private Tab tabApp3;

    @FXML
    private TextField C2Period;

    @FXML
    private Button confirmButtonC2;

    @FXML
    private VBox countryPaneC2;

    @FXML
    private Button ResetC2;

    @FXML
    private Tab tabHonor1;

    @FXML
    private TextField A3Date;

    @FXML
    private ChoiceBox<String> feature1A3;

    @FXML
    private ChoiceBox<String> feature2A3;

    @FXML
    private Button confirmButtonA3;

    @FXML
    private VBox countryPaneA3;

    @FXML
    private Button ResetA3;

    @FXML
    private Tab tabHonor3;

    @FXML
    private ChoiceBox<String> feature1C3;

    @FXML
    private ChoiceBox<String> feature2C3;

    @FXML
    private VBox countryPaneC3;

    @FXML
    private TextField C3Date;

    @FXML
    private Button confirmButtonC3;

    @FXML
    private Button ResetC3;

    @FXML
    private VBox showPane;
    
    @FXML
    private Button showMapButtonA3;
    
    @FXML
    private Button showMapButtonC3;
    
    
    /**
     * Create the country check boxes
     * To be triggered when choosing task A1
     * @param event 		Event Triggering the function
     */
    @FXML
    void addCountryCheckBoxListforA1(Event event) {
		List<CheckBox> countryList = createCountryCheckBoxList();
		countryPaneA1.getChildren().clear();
		countryPaneA1.getChildren().addAll(countryList);
        var child = showPane.getChildren();
        child.clear();
	}
    
    /**
     * Create the country check boxes
     * To be triggered when choosing task A2
     * @param event 		Event Triggering the function
     */
    @FXML
    void addCountryCheckBoxListforA2(Event event) {
		List<CheckBox> countryList = createCountryCheckBoxList();
		countryPaneA2.getChildren().clear();
		countryPaneA2.getChildren().addAll(countryList);
        var child = showPane.getChildren();
        child.clear();
	}
    
    /**
     * Create the country check boxes
     * To be triggered when choosing task B1
     * @param event 		Event Triggering the function
     */
    @FXML
    void addCountryCheckBoxListforB1(Event event) {
		List<CheckBox> countryList = createCountryCheckBoxList();
		countryPaneB1.getChildren().clear();
		countryPaneB1.getChildren().addAll(countryList);
        var child = showPane.getChildren();
        child.clear();
	}
    
    /**
     * Create the country check boxes
     * To be triggered when choosing task B2
     * @param event 		Event Triggering the function
     */
    @FXML
    void addCountryCheckBoxListforB2(Event event) {
		List<CheckBox> countryList = createCountryCheckBoxList();
		countryPaneB2.getChildren().clear();
		countryPaneB2.getChildren().addAll(countryList);
        var child = showPane.getChildren();
        child.clear();
	}
    
    /**
     * Create the country check boxes
     * To be triggered when choosing task C1
     * @param event 		Event Triggering the function
     */
    @FXML
    void addCountryCheckBoxListforC1(Event event) {
		List<CheckBox> countryList = createCountryCheckBoxList();
		countryPaneC1.getChildren().clear();
		countryPaneC1.getChildren().addAll(countryList);
        var child = showPane.getChildren();
        child.clear();
	}
    
    /**
     * Create the country check boxes
     * To be triggered when choosing task C2
     * @param event 		Event Triggering the function
     */
    @FXML
    void addCountryCheckBoxListforC2(Event event) {
		List<CheckBox> countryList = createCountryCheckBoxList();
		countryPaneC2.getChildren().clear();
		countryPaneC2.getChildren().addAll(countryList);
        var child = showPane.getChildren();
        child.clear();
	}
    
    /**
     * Create the country check boxes and add all options of the features
     * To be triggered when choosing task A3
     * @param event 		Event Triggering the function
     */
    @FXML
    void intializeSelectionsA3(Event event) {
		List<CheckBox> countryList = createCountryCheckBoxListForHonor();
		countryPaneA3.getChildren().clear();
		countryPaneA3.getChildren().addAll(countryList);
        var child = showPane.getChildren();
        child.clear();
    	feature1A3.getItems().clear();
    	feature1A3.getItems().add("stringency_index");
    	feature1A3.getItems().add("population");
    	feature1A3.getItems().add("population_density");
    	feature1A3.getItems().add("median_age");
    	feature1A3.getItems().add("aged_65_older");
    	feature1A3.getItems().add("aged_70_older");
    	feature1A3.getItems().add("gdp_per_capita");
    	feature1A3.getItems().add("extreme_poverty");
    	feature1A3.getItems().add("cardiovasc_death_rate");
    	feature1A3.getItems().add("diabetes_prevalence");
    	feature1A3.getItems().add("female_smokers");
    	feature1A3.getItems().add("male_smokers");
    	feature1A3.getItems().add("handwashing_facilities");
    	feature1A3.getItems().add("hospital_beds_per_thousand");
    	feature1A3.getItems().add("life_expectancy");
    	feature1A3.getItems().add("human_development_index");
    	feature1A3.getItems().add("excess_mortality");
    	
    	feature2A3.getItems().clear();
    	feature2A3.getItems().add("stringency_index");
    	feature2A3.getItems().add("population");
    	feature2A3.getItems().add("population_density");
    	feature2A3.getItems().add("median_age");
    	feature2A3.getItems().add("aged_65_older");
    	feature2A3.getItems().add("aged_70_older");
    	feature2A3.getItems().add("gdp_per_capita");
    	feature2A3.getItems().add("extreme_poverty");
    	feature2A3.getItems().add("cardiovasc_death_rate");
    	feature2A3.getItems().add("diabetes_prevalence");
    	feature2A3.getItems().add("female_smokers");
    	feature2A3.getItems().add("male_smokers");
    	feature2A3.getItems().add("handwashing_facilities");
    	feature2A3.getItems().add("hospital_beds_per_thousand");
    	feature2A3.getItems().add("life_expectancy");
    	feature2A3.getItems().add("human_development_index");
    	feature2A3.getItems().add("excess_mortality");
    }
    
    /**
     * Create the country check boxes and add all options of the features
     * To be triggered when choosing task C3
     * @param event 		Event Triggering the function
     */
    @FXML
    void intializeSelectionsC3(Event event) {
		List<CheckBox> countryList = createCountryCheckBoxListForHonor();
		countryPaneC3.getChildren().clear();
		countryPaneC3.getChildren().addAll(countryList);
        var child = showPane.getChildren();
        child.clear();
    	feature1C3.getItems().clear();
    	feature1C3.getItems().add("stringency_index");
    	feature1C3.getItems().add("population");
    	feature1C3.getItems().add("population_density");
    	feature1C3.getItems().add("median_age");
    	feature1C3.getItems().add("aged_65_older");
    	feature1C3.getItems().add("aged_70_older");
    	feature1C3.getItems().add("gdp_per_capita");
    	feature1C3.getItems().add("extreme_poverty");
    	feature1C3.getItems().add("cardiovasc_death_rate");
    	feature1C3.getItems().add("diabetes_prevalence");
    	feature1C3.getItems().add("female_smokers");
    	feature1C3.getItems().add("male_smokers");
    	feature1C3.getItems().add("handwashing_facilities");
    	feature1C3.getItems().add("hospital_beds_per_thousand");
    	feature1C3.getItems().add("life_expectancy");
    	feature1C3.getItems().add("human_development_index");
    	feature1C3.getItems().add("excess_mortality");
    	
    	feature2C3.getItems().clear();
    	feature2C3.getItems().add("stringency_index");
    	feature2C3.getItems().add("population");
    	feature2C3.getItems().add("population_density");
    	feature2C3.getItems().add("median_age");
    	feature2C3.getItems().add("aged_65_older");
    	feature2C3.getItems().add("aged_70_older");
    	feature2C3.getItems().add("gdp_per_capita");
    	feature2C3.getItems().add("extreme_poverty");
    	feature2C3.getItems().add("cardiovasc_death_rate");
    	feature2C3.getItems().add("diabetes_prevalence");
    	feature2C3.getItems().add("female_smokers");
    	feature2C3.getItems().add("male_smokers");
    	feature2C3.getItems().add("handwashing_facilities");
    	feature2C3.getItems().add("hospital_beds_per_thousand");
    	feature2C3.getItems().add("life_expectancy");
    	feature2C3.getItems().add("human_development_index");
    	feature2C3.getItems().add("excess_mortality");
    }
    
    
    /**
     * Helper function to create a list of country box for task 1 and 2
     * To be used by addCountryCheckBoxListforXX methods
     * @return Reference to list of CheckBox containing all checkboxes of country
     */
	List<CheckBox> createCountryCheckBoxList() {
		List<String> countryList = DataAnalysis.getCountryList("COVID_Dataset_v1.0.csv");
		List<CheckBox> boxList = new ArrayList<>();
		for (int i = 0; i < countryList.size(); i++) {
			boxList.add(new CheckBox());
			boxList.get(i).setText(countryList.get(i));
			//System.out.println(boxList.get(i).getText());
		}
		return boxList;
		
	}
    
	
    /**
     * Helper function to create a list of country box for task 3 (honor track tasks), 
     * excluding the continents and world
     * To be used by intializeSelectionsXX methods
     * @return Reference to list of CheckBox containing all checkboxes of country
     */
	List<CheckBox> createCountryCheckBoxListForHonor() {
		List<String> countryList = DataAnalysis.getCountryList("COVID_Dataset_v2.0.csv");
		List<CheckBox> boxList = new ArrayList<>();
		for (int i = 0; i < countryList.size(); i++) {
			boxList.add(new CheckBox());
			boxList.get(i).setText(countryList.get(i));
			//System.out.println(boxList.get(i).getText());
		}
		return boxList;
		
	}
	
    /**
     * Clear all selections of the countries in task A1
     * To be triggered when clicking the Reset button in task A1
     * @param event 		Event Triggering the function
     */
	@FXML 
	void ResetA1(ActionEvent event) {
		var child = countryPaneA1.getChildren();
		for (var box : child)
			((CheckBox)box).setSelected(false);
	}
	
    /**
     * Clear all selections of the countries in task B1
     * To be triggered when clicking the Reset button in task B1
     * @param event 		Event Triggering the function
     */
	@FXML 
	void ResetB1(ActionEvent event) {
		var child = countryPaneB1.getChildren();
		for (var box : child)
			((CheckBox)box).setSelected(false);
	}
	
    /**
     * Clear all selections of the countries in task C1
     * To be triggered when clicking the Reset button in task C1
     * @param event 		Event Triggering the function
     */
	@FXML 
	void ResetC1(ActionEvent event) {
		var child = countryPaneC1.getChildren();
		for (var box : child)
			((CheckBox)box).setSelected(false);
	}
	
    /**
     * Clear all selections of the countries in task A2
     * To be triggered when clicking the Reset button in task A2
     * @param event 		Event Triggering the function
     */
	@FXML 
	void ResetA2(ActionEvent event) {
		var child = countryPaneA2.getChildren();
		for (var box : child)
			((CheckBox)box).setSelected(false);
	}
	
    /**
     * Clear all selections of the countries in task B2
     * To be triggered when clicking the Reset button in task B2
     * @param event 		Event Triggering the function
     */
	@FXML 
	void ResetB2(ActionEvent event) {
		var child = countryPaneB2.getChildren();
		for (var box : child)
			((CheckBox)box).setSelected(false);
	}
	
    /**
     * Clear all selections of the countries in task C2
     * To be triggered when clicking the Reset button in task C2
     * @param event 		Event Triggering the function
     */
	@FXML 
	void ResetC2(ActionEvent event) {
		var child = countryPaneC2.getChildren();
		for (var box : child)
			((CheckBox)box).setSelected(false);
	}
	
    /**
     * Clear all selections of the countries in task A3
     * To be triggered when clicking the Reset button in task A3
     * @param event 		Event Triggering the function
     */
	@FXML 
	void ResetA3(ActionEvent event) {
		var child = countryPaneA3.getChildren();
		for (var box : child)
			((CheckBox)box).setSelected(false);
	}
	
    /**
     * Clear all selections of the countries in task C3
     * To be triggered when clicking the Reset button in task C3
     * @param event 		Event Triggering the function
     */
	@FXML 
	void ResetC3(ActionEvent event) {
		var child = countryPaneC3.getChildren();
		for (var box : child)
			((CheckBox)box).setSelected(false);
	}
    
    /**
     * Generate the table for task A1
     * To be triggered when clicking the Confirm button in task A1
     * @param event 		Event Triggering the function
     */
    @FXML
    void doTaskA1(ActionEvent event) {
        var child = showPane.getChildren();
        child.clear();
    	// Get Date Input
    	String inputDate = A1Date.getText();
    	
    	// Get Country Input
    	ArrayList<String> countries = new ArrayList<>();
    	var boxList = countryPaneA1.getChildren();
    	for (int i = 0; i < boxList.size(); i++) {
    		var box = (CheckBox) boxList.get(i);
    		if (box.isSelected())
    			countries.add(box.getText());
    	}
    	
    		
    	if (!comp3111.covid.util.DateParser.isValidDate(inputDate))
    		comp3111.covid.view.UIService.showDateInvalidDialog();
    	else if (!comp3111.covid.util.DateParser.isDateWithinRange(inputDate))
    		comp3111.covid.view.UIService.showDateOutOfRangeDialog();
    	else if (countries.size() == 0)
    		comp3111.covid.view.UIService.showCountryNotSpecifiedDialog();
    	else {
    		System.out.println(comp3111.covid.util.DateParser.transformToDateString(inputDate));
    		comp3111.covid.model.RequestOnDate request = new comp3111.covid.model.RequestOnDate(countries, 
    				comp3111.covid.util.DateParser.transformToDateString(inputDate), 2);
    		for (int i = 0; i < countries.size(); i++) {
        		System.out.println(((comp3111.covid.model.ConfirmedCaseRecord)request.getRecord(countries.get(i))).getTotalNumConfirmedCase());
    		}

    		TableView<comp3111.covid.model.ConfirmedCaseRecord> table = new TableView<>();
    		TableColumn<comp3111.covid.model.ConfirmedCaseRecord, String> countryCol
    					= new TableColumn("Country");
            TableColumn<comp3111.covid.model.ConfirmedCaseRecord, Long> totalCol
            			= new TableColumn("Total Cases");
            TableColumn<comp3111.covid.model.ConfirmedCaseRecord, Double> rateCol
            			= new TableColumn("Total Cases (per 1M)");
            countryCol.setCellValueFactory(new PropertyValueFactory<>("country"));
            totalCol.setCellValueFactory(new PropertyValueFactory<>("TotalNumConfirmedCase"));
            rateCol.setCellValueFactory(new PropertyValueFactory<>("NumConfirmedCasePerMillion"));
            List<comp3111.covid.model.ConfirmedCaseRecord> arrayList = new ArrayList<>();
            for (int i = 0; i < countries.size(); i++) {
            	arrayList.add((comp3111.covid.model.ConfirmedCaseRecord)(request.getRecord(countries.get(i))));
            }
            ObservableList<comp3111.covid.model.ConfirmedCaseRecord> list = 
            		FXCollections.observableArrayList(arrayList);
            Label label = new Label("Number of Confirmed COVID-19 Cases as of " + inputDate);
            table.setItems(list);
            table.getColumns().addAll(countryCol, totalCol, rateCol);
            child.add(label);
            child.add((Node)table);
        }
    }
    
    /**
     * Generate the table for task B1
     * To be triggered when clicking the Confirm button in task B1
     * @param event 		Event Triggering the function
     */
    @FXML
    void doTaskB1(ActionEvent event) {
        var child = showPane.getChildren();
        child.clear();
    	// Get Date Input
    	String inputDate = B1Date.getText();
    	
    	// Get Country Input
    	ArrayList<String> countries = new ArrayList<>();
    	var boxList = countryPaneB1.getChildren();
    	for (int i = 0; i < boxList.size(); i++) {
    		var box = (CheckBox) boxList.get(i);
    		if (box.isSelected())
    			countries.add(box.getText());
    	}
    	
    		
    	if (!comp3111.covid.util.DateParser.isValidDate(inputDate))
    		comp3111.covid.view.UIService.showDateInvalidDialog();
    	else if (!comp3111.covid.util.DateParser.isDateWithinRange(inputDate))
    		comp3111.covid.view.UIService.showDateOutOfRangeDialog();
    	else if (countries.size() == 0)
    		comp3111.covid.view.UIService.showCountryNotSpecifiedDialog();
    	else {
    		System.out.println(comp3111.covid.util.DateParser.transformToDateString(inputDate));
    		comp3111.covid.model.RequestOnDate request = new comp3111.covid.model.RequestOnDate(countries, 
    				comp3111.covid.util.DateParser.transformToDateString(inputDate), 1);
    		for (int i = 0; i < countries.size(); i++) {
        		System.out.println(((comp3111.covid.model.DeathRecord)request.getRecord(countries.get(i))).getTotalNumDeath());
    		}

    		TableView<comp3111.covid.model.DeathRecord> table = new TableView<>();
    		TableColumn<comp3111.covid.model.DeathRecord, String> countryCol
    					= new TableColumn("Country");
            TableColumn<comp3111.covid.model.DeathRecord, Long> totalCol
            			= new TableColumn("Total Deaths");
            TableColumn<comp3111.covid.model.DeathRecord, Double> rateCol
            			= new TableColumn("Total Deaths (per 1M)");
            countryCol.setCellValueFactory(new PropertyValueFactory<>("country"));
            totalCol.setCellValueFactory(new PropertyValueFactory<>("TotalNumDeath"));
            rateCol.setCellValueFactory(new PropertyValueFactory<>("NumDeathPerMillion"));
            List<comp3111.covid.model.DeathRecord> arrayList = new ArrayList<>();
            for (int i = 0; i < countries.size(); i++) {
            	arrayList.add((comp3111.covid.model.DeathRecord)(request.getRecord(countries.get(i))));
            }
            ObservableList<comp3111.covid.model.DeathRecord> list = 
            		FXCollections.observableArrayList(arrayList);
            Label label = new Label("Number of Confirmed COVID-19 Deaths as of " + inputDate);
            table.setItems(list);
            table.getColumns().addAll(countryCol, totalCol, rateCol);
            child.add(label);
            child.add((Node)table);
        }
    }
    
    /**
     * Generate the table for task C1
     * To be triggered when clicking the Confirm button in task C1
     * @param event 		Event Triggering the function
     */
    @FXML
    void doTaskC1(ActionEvent event) {
        var child = showPane.getChildren();
        child.clear();
    	// Get Date Input
    	String inputDate = C1Date.getText();
    	
    	// Get Country Input
    	ArrayList<String> countries = new ArrayList<>();
    	var boxList = countryPaneC1.getChildren();
    	for (int i = 0; i < boxList.size(); i++) {
    		var box = (CheckBox) boxList.get(i);
    		if (box.isSelected())
    			countries.add(box.getText());
    	}
    	
    		
    	if (!comp3111.covid.util.DateParser.isValidDate(inputDate))
    		comp3111.covid.view.UIService.showDateInvalidDialog();
    	else if (!comp3111.covid.util.DateParser.isDateWithinRange(inputDate))
    		comp3111.covid.view.UIService.showDateOutOfRangeDialog();
    	else if (countries.size() == 0)
    		comp3111.covid.view.UIService.showCountryNotSpecifiedDialog();
    	else {
    		System.out.println(comp3111.covid.util.DateParser.transformToDateString(inputDate));
    		comp3111.covid.model.RequestOnDate request = new comp3111.covid.model.RequestOnDate(countries, 
    				comp3111.covid.util.DateParser.transformToDateString(inputDate), 3);
    		for (int i = 0; i < countries.size(); i++) {
        		System.out.println(((comp3111.covid.model.VaccinationRecord)request.getRecord(countries.get(i))).getNumVaccination());
    		}

    		TableView<comp3111.covid.model.VaccinationRecord> table = new TableView<>();
    		TableColumn<comp3111.covid.model.VaccinationRecord, String> countryCol
    					= new TableColumn("Country");
            TableColumn<comp3111.covid.model.VaccinationRecord, String> totalCol
            			= new TableColumn("Fully Vaccinated");
            TableColumn<comp3111.covid.model.VaccinationRecord, String> rateCol
            			= new TableColumn("Rate of Vaccination");
            countryCol.setCellValueFactory(new PropertyValueFactory<>("country"));
            totalCol.setCellValueFactory(new PropertyValueFactory<>("NumString"));
            rateCol.setCellValueFactory(new PropertyValueFactory<>("RateInPercentage"));
            List<comp3111.covid.model.VaccinationRecord> arrayList = new ArrayList<>();
            for (int i = 0; i < countries.size(); i++) {
            	arrayList.add((comp3111.covid.model.VaccinationRecord)(request.getRecord(countries.get(i))));
            }
            ObservableList<comp3111.covid.model.VaccinationRecord> list = 
            		FXCollections.observableArrayList(arrayList);
            Label label = new Label("Rate of Vaccination against COVID-19 as of " + inputDate);
            table.setItems(list);
            table.getColumns().addAll(countryCol, totalCol, rateCol);
            child.add(label);
            child.add((Node)table);
        }
    }
    
    /**
     * Generate the chart for task A2
     * To be triggered when clicking the Confirm button in task A2
     * @param event 		Event Triggering the function
     */
    @FXML
    void doTaskA2(ActionEvent event) {
        var child = showPane.getChildren();
        child.clear();
    	// Get Period Input
    	String inputPeriod = A2Period.getText();
    	
    	// Get Country Input
    	ArrayList<String> countries = new ArrayList<>();
    	var boxList = countryPaneA2.getChildren();
    	for (int i = 0; i < boxList.size(); i++) {
    		var box = (CheckBox) boxList.get(i);
    		if (box.isSelected())
    			countries.add(box.getText());
    	}
    	
    		
    	if (!comp3111.covid.util.PeriodParser.isValidDateInPeriod(inputPeriod))
    		comp3111.covid.view.UIService.showPeriodInvalidDialog();
    	else if (!comp3111.covid.util.PeriodParser.isDateWithinRangeInPeriod(inputPeriod))
    		comp3111.covid.view.UIService.showDateOutOfRangeDialog();
    	else if (!comp3111.covid.util.PeriodParser.isStartBeforeEnd(inputPeriod))
    		comp3111.covid.view.UIService.showStartLaterThanEndDialog();
    	else if (countries.size() == 0)
    		comp3111.covid.view.UIService.showCountryNotSpecifiedDialog();
    	else {
    		//return;
        	var dates = comp3111.covid.util.PeriodParser.transformToPeriodString(inputPeriod);
        	comp3111.covid.model.Period period = new comp3111.covid.model.Period(dates[0], dates[1]);
    		comp3111.covid.model.RequestOverPeriod request = new comp3111.covid.model.RequestOverPeriod(countries, 
    				period, 2);
            final CategoryAxis xAxis = new CategoryAxis();
            final NumberAxis yAxis = new NumberAxis();
            xAxis.setLabel("Date");
    		LineChart<String, Number> chart = new LineChart<String, Number>(xAxis,yAxis);
    		chart.setTitle("Cumulative Confirmed COVID-19 Cases (per 1M)");
            List<comp3111.covid.model.ConfirmedCaseRecord> arrayList = new ArrayList<>();
            List<XYChart.Series> series = new ArrayList<>();
            for (int i = 0; i < countries.size(); i++) {
            	series.add(new XYChart.Series());
            	series.get(i).setName(countries.get(i));
            	var datebetween = period.getDatesBetween();
            	System.out.println(datebetween);
            	for (int j = 0; j < datebetween.size(); j++) {
            		var record = (comp3111.covid.model.ConfirmedCasePeriodRecord) (request).getPeriodRecord(countries.get(i), period);
            		System.out.println("size is " + record.getNumConfirmedCasePerMillion().size());
            		var datay = record.getNumConfirmedCasePerMillion().get(j);	
            		series.get(i).getData().add(new XYChart.Data(datebetween.get(j), datay));
            		System.out.println(datay);
            	}
            	chart.getData().add(series.get(i));
            	chart.setCreateSymbols(false);
            }
            child.add((Node)chart);

        }
    }
    
    /**
     * Generate the chart for task B2
     * To be triggered when clicking the Confirm button in task B2
     * @param event 		Event Triggering the function
     */
    @FXML
    void doTaskB2(ActionEvent event) {
    	var child = showPane.getChildren();
        child.clear();
    	// Get Period Input
    	String inputPeriod = B2Period.getText();
    	
    	// Get Country Input
    	ArrayList<String> countries = new ArrayList<>();
    	var boxList = countryPaneB2.getChildren();
    	for (int i = 0; i < boxList.size(); i++) {
    		var box = (CheckBox) boxList.get(i);
    		if (box.isSelected())
    			countries.add(box.getText());
    	}
    	
    		
    	if (!comp3111.covid.util.PeriodParser.isValidDateInPeriod(inputPeriod))
    		comp3111.covid.view.UIService.showPeriodInvalidDialog();
    	else if (!comp3111.covid.util.PeriodParser.isDateWithinRangeInPeriod(inputPeriod))
    		comp3111.covid.view.UIService.showDateOutOfRangeDialog();
    	else if (!comp3111.covid.util.PeriodParser.isStartBeforeEnd(inputPeriod))
    		comp3111.covid.view.UIService.showStartLaterThanEndDialog();
    	else if (countries.size() == 0)
    		comp3111.covid.view.UIService.showCountryNotSpecifiedDialog();
    	else {
    		//return;
        	var dates = comp3111.covid.util.PeriodParser.transformToPeriodString(inputPeriod);
        	comp3111.covid.model.Period period = new comp3111.covid.model.Period(dates[0], dates[1]);
    		comp3111.covid.model.RequestOverPeriod request = new comp3111.covid.model.RequestOverPeriod(countries, 
    				period, 1);
            final CategoryAxis xAxis = new CategoryAxis();
            final NumberAxis yAxis = new NumberAxis();
            xAxis.setLabel("Date");
    		LineChart<String, Number> chart = new LineChart<String, Number>(xAxis,yAxis);
    		chart.setTitle("Cumulative Confirmed COVID-19 Deaths (per 1M)");
            List<comp3111.covid.model.DeathRecord> arrayList = new ArrayList<>();
            List<XYChart.Series> series = new ArrayList<>();
            for (int i = 0; i < countries.size(); i++) {
            	series.add(new XYChart.Series());
            	series.get(i).setName(countries.get(i));
            	var datebetween = period.getDatesBetween();
            	System.out.println(datebetween);
            	for (int j = 0; j < datebetween.size(); j++) {
            		var record = (comp3111.covid.model.DeathPeriodRecord) (request).getPeriodRecord(countries.get(i), period);
            		var datay = record.getNumDeathPerMillions().get(j);	
            		series.get(i).getData().add(new XYChart.Data(datebetween.get(j), datay));
            		System.out.println(datay);
            	}
            	chart.getData().add(series.get(i));
            	chart.setCreateSymbols(false);
            }
            child.add((Node)chart);

        }
    }
    
    /**
     * Generate the chart for task C2
     * To be triggered when clicking the Confirm button in task C2
     * @param event 		Event Triggering the function
     */
    @FXML
    void doTaskC2(ActionEvent event) {
    	var child = showPane.getChildren();
        child.clear();
    	// Get Period Input
    	String inputPeriod = C2Period.getText();
    	
    	// Get Country Input
    	ArrayList<String> countries = new ArrayList<>();
    	var boxList = countryPaneC2.getChildren();
    	for (int i = 0; i < boxList.size(); i++) {
    		var box = (CheckBox) boxList.get(i);
    		if (box.isSelected())
    			countries.add(box.getText());
    	}
    	
    	
    		
    	if (!comp3111.covid.util.PeriodParser.isValidDateInPeriod(inputPeriod))
    		comp3111.covid.view.UIService.showPeriodInvalidDialog();
    	else if (!comp3111.covid.util.PeriodParser.isDateWithinRangeInPeriod(inputPeriod))
    		comp3111.covid.view.UIService.showDateOutOfRangeDialog();
    	else if (!comp3111.covid.util.PeriodParser.isStartBeforeEnd(inputPeriod))
    		comp3111.covid.view.UIService.showStartLaterThanEndDialog();
    	else if (countries.size() == 0)
    		comp3111.covid.view.UIService.showCountryNotSpecifiedDialog();
    	else {
    		//return;
        	var dates = comp3111.covid.util.PeriodParser.transformToPeriodString(inputPeriod);
        	comp3111.covid.model.Period period = new comp3111.covid.model.Period(dates[0], dates[1]);
    		comp3111.covid.model.RequestOverPeriod request = new comp3111.covid.model.RequestOverPeriod(countries, 
    				period, 3);
            final CategoryAxis xAxis = new CategoryAxis();
            final NumberAxis yAxis = new NumberAxis();
            xAxis.setLabel("Date");
            yAxis.setLabel("VaccinationRate (%)");
    		LineChart<String, Number> chart = new LineChart<String, Number>(xAxis,yAxis);
    		chart.setTitle("Cumulative Rate of Vaccination against COVID-19");
            List<comp3111.covid.model.VaccinationRecord> arrayList = new ArrayList<>();
            List<XYChart.Series> series = new ArrayList<>();
            for (int i = 0; i < countries.size(); i++) {
            	series.add(new XYChart.Series());
            	series.get(i).setName(countries.get(i));
            	var datebetween = period.getDatesBetween();
            	System.out.println(datebetween);
            	Double temp = 0.0;
            	for (int j = 0; j < datebetween.size(); j++) {
            		var record = (comp3111.covid.model.VaccinationPeriodRecord) (request).getPeriodRecord(countries.get(i), period);
            		var datay = record.getVaccinationRates().get(j);	
            		if (datay - 0 >= 0.00000001) {
            			temp = datay;
            			series.get(i).getData().add(new XYChart.Data(datebetween.get(j), datay));
            			System.out.println(datay);
            		} else {
            			series.get(i).getData().add(new XYChart.Data(datebetween.get(j), temp));
            			System.out.println("No data");
            		}
            	}
            	chart.getData().add(series.get(i));
            	chart.setCreateSymbols(false);
            }
            child.add((Node)chart);

        }
    }
    
    /**
     * Generate the bubble chart for task A3 with the selected two features
     * To be triggered when clicking the "Show Bubble Chart" button in task A3
     * @param event 		Event Triggering the function
     */
    @FXML
    void doTaskA3(ActionEvent event) {
    	var child = showPane.getChildren();
        child.clear();
    	// Get Date Input
    	String inputDate = A3Date.getText();
    	
    	// Get Feature Input
    	String feature1 = feature1A3.getValue();
    	String feature2 = feature2A3.getValue();
    	
    	// Get Country Input
    	ArrayList<String> countries = new ArrayList<>();
    	var boxList = countryPaneA3.getChildren();
    	for (int i = 0; i < boxList.size(); i++) {
    		var box = (CheckBox) boxList.get(i);
    		if (box.isSelected())
    			countries.add(box.getText());
    	}
    	
    	
    	// validation
    	if (!comp3111.covid.util.DateParser.isValidDate(inputDate))
    		comp3111.covid.view.UIService.showDateInvalidDialog();
    	else if (!comp3111.covid.util.DateParser.isDateWithinRange(inputDate))
    		comp3111.covid.view.UIService.showDateOutOfRangeDialog();
    	else if (feature1.equals(feature2))
    		comp3111.covid.view.UIService.showSameFeatureDialog();
    	else if (countries.size() < 2)
    		comp3111.covid.view.UIService.showLessThanTwoCountriesDialog();
    	else {
    		var date = comp3111.covid.util.DateParser.transformToDateString(inputDate);
    		//var map = comp3111.covid.view.FXMLController.GenerateMap();
    		var featureData = comp3111.covid.view.HonorTask.getFeaturesForA3(feature1, feature2, date, countries);
    		var feature1Data = featureData.get(0);
    		var feature2Data = featureData.get(1);
    		var confirmedData = featureData.get(2);
    		var chart = comp3111.covid.view.HonorTask.generateChartForA3(feature1, feature2, date, countries, 
    				feature1Data, feature2Data, confirmedData);
    		var table = comp3111.covid.view.HonorTask.generateReportForA3(feature1, feature2, date, countries, 
    				feature1Data, feature2Data, confirmedData);
//    		child.add(map);
    		child.add(chart);
    		child.add(table);
    	}
    	
    }
    
    /**
     * Generate the bubble chart for task C3 with the selected two features
     * To be triggered when clicking the "Show Bubble Chart" button in task C3
     * @param event 		Event Triggering the function
     */
    @FXML
    void doTaskC3(ActionEvent event) {
    	var child = showPane.getChildren();
        child.clear();
    	// Get Date Input
    	String inputDate = C3Date.getText();
    	
    	// Get Feature Input
    	String feature1 = feature1C3.getValue();
    	String feature2 = feature2C3.getValue();
    	
    	// Get Country Input
    	ArrayList<String> countries = new ArrayList<>();
    	var boxList = countryPaneC3.getChildren();
    	for (int i = 0; i < boxList.size(); i++) {
    		var box = (CheckBox) boxList.get(i);
    		if (box.isSelected())
    			countries.add(box.getText());
    	}
    	
    	// validation
    	if (!comp3111.covid.util.DateParser.isValidDate(inputDate))
    		comp3111.covid.view.UIService.showDateInvalidDialog();
    	else if (!comp3111.covid.util.DateParser.isDateWithinRange(inputDate))
    		comp3111.covid.view.UIService.showDateOutOfRangeDialog();
    	else if (feature1.equals(feature2))
    		comp3111.covid.view.UIService.showSameFeatureDialog();
    	else if (countries.size() < 2)
    		comp3111.covid.view.UIService.showLessThanTwoCountriesDialog();
    	else {
    		var date = comp3111.covid.util.DateParser.transformToDateString(inputDate);
    		//var map = comp3111.covid.view.HonorTask.generateMapForA3();
    		var featureData = comp3111.covid.view.HonorTask.getFeaturesForC3(feature1, feature2, date, countries);
    		var feature1Data = featureData.get(0);
    		var feature2Data = featureData.get(1);
    		var confirmedData = featureData.get(2);
    		var chart = comp3111.covid.view.HonorTask.generateChartForC3(feature1, feature2, date, countries, 
    				feature1Data, feature2Data, confirmedData);
    		var table = comp3111.covid.view.HonorTask.generateReportForC3(feature1, feature2, date, countries, 
    				feature1Data, feature2Data, confirmedData);
    		//child.add(map);
    		child.add(chart);
    		child.add(table);
    	}
    	
    }
    
    /**
     * Generate the world map for task A3
     * To be triggered when clicking the "Show Map" button in task A3
     * @param e 		Event Triggering the function
     */
    @FXML
    void showMapA3(ActionEvent e) {
        var child = showPane.getChildren();
        child.clear();
    	// Get Date Input
    	String inputDate = A3Date.getText();
    	
    	// Get Country Input
    	ArrayList<String> countries = new ArrayList<>();
    	var boxList = countryPaneA3.getChildren();
    	for (int i = 0; i < boxList.size(); i++) {
    		var box = (CheckBox) boxList.get(i);
    		if (box.isSelected())
    			countries.add(box.getText());
    	}
    	if (!comp3111.covid.util.DateParser.isValidDate(inputDate))
    		comp3111.covid.view.UIService.showDateInvalidDialog();
    	else if (!comp3111.covid.util.DateParser.isDateWithinRange(inputDate))
    		comp3111.covid.view.UIService.showDateOutOfRangeDialog();
    	else if (countries.size() == 0)
    		comp3111.covid.view.UIService.showCountryNotSpecifiedDialog();
    	else {
    		var date = comp3111.covid.util.DateParser.transformToDateString(inputDate);
    		comp3111.covid.view.HonorTask.generateMapForA3(countries, date);
    	}
    }
    
    /**
     * Generate the world map for task A3
     * To be triggered when clicking the "Show Map" button in task A3
     * @param e 		Event Triggering the function
     */
    @FXML
    void showMapC3(ActionEvent e) {
        var child = showPane.getChildren();
        child.clear();
    	// Get Date Input
    	String inputDate = C3Date.getText();
    	
    	// Get Country Input
    	ArrayList<String> countries = new ArrayList<>();
    	var boxList = countryPaneC3.getChildren();
    	for (int i = 0; i < boxList.size(); i++) {
    		var box = (CheckBox) boxList.get(i);
    		if (box.isSelected())
    			countries.add(box.getText());
    	}
    	if (!comp3111.covid.util.DateParser.isValidDate(inputDate))
    		comp3111.covid.view.UIService.showDateInvalidDialog();
    	else if (!comp3111.covid.util.DateParser.isDateWithinRange(inputDate))
    		comp3111.covid.view.UIService.showDateOutOfRangeDialog();
    	else if (countries.size() == 0)
    		comp3111.covid.view.UIService.showCountryNotSpecifiedDialog();
    	else {
    		var date = comp3111.covid.util.DateParser.transformToDateString(inputDate);
    		comp3111.covid.view.HonorTask.generateMapForC3(countries, date);
    	}
    }
    
    /**
     *  Task Zero to get the confirmed case data
     *  To be triggered by the "Confirmed Cases" button on the Task Zero Tab 
     *  
     */
    @FXML
    void doConfirmedCases(ActionEvent event) {
    	String iDataset = textfieldDataset.getText();
    	String iISO = textfieldISO.getText();
    	String oReport = DataAnalysis.getConfirmedCases(iDataset, iISO);
    	TextArea textAreaConsole = new TextArea();
        var child = showPane.getChildren();
        child.clear();
        child.add(textAreaConsole);
    	textAreaConsole.setText(oReport);
    }

  
    /**
     *  Task Zero to get the death data
     *  To be triggered by the "Confirmed Deaths" button on the Task Zero Tab
     *  
     */
    @FXML
    void doConfirmedDeaths(ActionEvent event) {
    	String iDataset = textfieldDataset.getText();
    	String iISO = textfieldISO.getText();
    	String oReport = DataAnalysis.getConfirmedDeaths(iDataset, iISO);
    	TextArea textAreaConsole = new TextArea();
        var child = showPane.getChildren();
        child.clear();
        child.add(textAreaConsole);
    	textAreaConsole.setText(oReport);
    	textAreaConsole.setText(oReport);
    }

  
    /**
     *  Task Zero to get the vaccination data
     *  To be triggered by the "Rate of Vaccination" button on the Task Zero Tab
     *  
     */
    @FXML
    void doRateOfVaccination(ActionEvent event) {
    	String iDataset = textfieldDataset.getText();
    	String iISO = textfieldISO.getText();
    	String oReport = DataAnalysis.getRateOfVaccination(iDataset, iISO);
    	TextArea textAreaConsole = new TextArea();
        var child = showPane.getChildren();
        child.clear();
        child.add(textAreaConsole);
    	textAreaConsole.setText(oReport);
    	textAreaConsole.setText(oReport);
    }  
    
}

